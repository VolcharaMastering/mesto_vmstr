!function(){"use strict";var e={activeForm:".popup__inputs",formInput:".popup__input",popupSaveButton:".popup__save",popupDisableButton:"popup__save_disable",inputError:"popup__input_type_error",activeError:"popup__input_error_active"},t=document.querySelector(".gallery"),n=document.forms.profile,r=document.forms.addImage,o=document.forms.addAvatar,i=t.querySelector(".profile__avatar-image");function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t,n,r,o,i){var a=this,u=o.handleCardDelete,s=o.delLike,l=o.addLike;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"_getTemplate",(function(){return document.querySelector(a._selector).content.cloneNode(!0)})),c(this,"_deleteImage",(function(){a._handleCardDelete(a._card)})),c(this,"_addEvents",(function(){a._card.owner._id==a._myId?a._cardRemove.addEventListener("click",a._deleteImage):(a._cardRemove.remove(),a._cardRemove=null),a._cardLike.addEventListener("click",(function(){a._like?a._delLike(a._card._id):a._addLike(a._card._id),a._cardLike.classList.toggle("card__like_active")})),a._cardImage.addEventListener("click",(function(){a._handleCardClick(a._card.name,a._card.link)}))})),c(this,"_checkLikes",(function(){a._card.likes.length>0&&a._card.likes.find((function(e){return e._id==a._myId}))?(a._cardLike.classList.add("card__like_active"),a._like=!0):a._like=!1})),c(this,"_addLikeCounter",(function(e){a._likeNumber.textContent=e})),c(this,"updateLikes",(function(e){a._card.likes=e,a._checkLikes(),a._addLikeCounter(a._card.likes.length)})),this._card=t,this._selector=n,this._handleCardClick=r,this._handleCardDelete=u,this._delLike=s,this._addLike=l,this._myId=i,this._like=!1}var t,n;return t=e,(n=[{key:"delCard",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"makeCard",value:function(){return this._cardTemplate=this._getTemplate(),this._cardElement=this._cardTemplate.querySelector(".card"),this._cardImage=this._cardTemplate.querySelector(".card__image"),this._cardName=this._cardTemplate.querySelector(".card__name"),this._cardRemove=this._cardTemplate.querySelector(".card__remove"),this._cardLike=this._cardTemplate.querySelector(".card__like"),this._likeNumber=this._cardTemplate.querySelector(".card__like-count"),this._checkLikes(),this._addLikeCounter(this._card.likes.length),this._cardImage.setAttribute("src",this._card.link),this._cardImage.setAttribute("alt","Фото из галереи: "+this._card.name),this._cardName.textContent=this._card.name,this._addEvents(),this._cardTemplate}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._items.forEach((function(t){return e._renderer(t)}))}},{key:"prepends",value:function(e){this._container.prepend(e)}},{key:"appends",value:function(e){this._container.append(e)}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=p((function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"_setEventListeners",(function(){r._toggleButtonState(),r._inputArray.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleButtonState()}))}))})),d(this,"enableValidation",(function(){r._setEventListeners()})),d(this,"_showInputError",(function(e,t){var n=r._form.querySelector(".".concat(e.id,"-error"));e.classList.add(r._inputError),n.classList.add(r._activeError),n.textContent=t})),d(this,"_hideInputError",(function(e){var t=r._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(r._inputError),t.classList.remove(r._activeError),t.textContent=""})),d(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),d(this,"_hasInvalidInput",(function(){return r._inputArray.some((function(e){return!e.validity.valid}))})),d(this,"_toggleButtonState",(function(){r._hasInvalidInput()?(r._saveButton.classList.add(r._popupDisableButton),r._saveButton.setAttribute("disabled","disabled")):(r._saveButton.classList.remove(r._popupDisableButton),r._saveButton.removeAttribute("disabled"))})),d(this,"resetValidation",(function(){r._toggleButtonState(),r._inputArray.forEach((function(e){r._hideInputError(e)}))})),this._activeForm=t.activeForm,this._formInput=t.formInput,this._popupSaveButton=t.popupSaveButton,this._popupDisableButton=t.popupDisableButton,this._inputError=t.inputError,this._activeError=t.activeError,this._form=n,this._inputArray=Array.from(this._form.querySelectorAll(this._formInput)),this._saveButton=this._form.querySelector(this._popupSaveButton)}));function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(){document.addEventListener("keydown",o._escCloseListen=function(e){"Escape"===e.key&&o.close()})},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_active"),this._handleEscClose()}},{key:"close",value:function(){this._popup.classList.remove("popup_active"),document.removeEventListener("keydown",this._escCloseListen)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",this._closeListener=function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()})}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){return b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},b(e,t)}function m(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return g(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&b(e,t)}(i,e);var t,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(n);if(r){var o=E(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return m(this,e)});function i(e){var t,n,r,a,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),c=function(e,r){n._bigImage.setAttribute("src",r),n._bigImage.setAttribute("alt","Увеличенное фото из галереи: "+e),n._bigImageCaption.textContent=e,k((t=g(n),E(i.prototype)),"open",t).call(t)},(a="open")in(r=g(n=o.call(this,e)))?Object.defineProperty(r,a,{value:c,enumerable:!0,configurable:!0,writable:!0}):r.open=c,n._bigImage=n._popup.querySelector(".popup__image"),n._bigImageCaption=n._popup.querySelector(".popup__image-caption"),n}return t=i,Object.defineProperty(t,"prototype",{writable:!1}),t}(y);function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(){return P="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=S(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},P.apply(this,arguments)}function S(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=B(e)););return e}function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function I(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function B(e){return B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},B(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=B(r);if(o){var n=B(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._form=n._popup.querySelector(".popup__inputs"),n._inputArray=n._popup.querySelectorAll(".popup__input"),n._getDataFromApi=t,n._saveButton=n._popup.querySelector(".popup__save"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputArray.forEach((function(t){e[t.name]=t.value})),e}},{key:"changeSaveButton",value:function(){this._saveButton.textContent="Сохранение..."}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._getDataFromApi(e._getInputValues())})),P(B(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){P(B(a.prototype),"close",this).call(this),this._form.reset()}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(y);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t){var n=t.name,r=t.about;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._about=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url="https://mesto.nomoreparties.co/v1/cohort-43/",this._token=t,this._headers={"Content-type":"application/json",authorization:"9ccf29bd-3d67-4cc8-8c99-82c18d019a44"}}var t,n;return t=e,(n=[{key:"getData",value:function(e){return fetch(this._url+e,{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}},{key:"delLike",value:function(e){return fetch(this._url+e,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}},{key:"addLike",value:function(e){return fetch(this._url+e,{headers:this._headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}},{key:"setCard",value:function(e,t){return fetch(this._url+e,{headers:this._headers,method:"POST",body:JSON.stringify(t)}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}},{key:"delCard",value:function(e,t){return fetch(this._url+e+t,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}},{key:"setProfile",value:function(e,t){return fetch(this._url+e,{headers:this._headers,method:"PATCH",body:JSON.stringify(t)}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected! ".concat(e.status))}))}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function x(e){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x(e)}function V(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=F(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},U.apply(this,arguments)}function F(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}function G(e,t){return G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},G(e,t)}function H(e,t){if(t&&("object"===x(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return J(e)}function J(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&G(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function a(){var e;V(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Y(J(e=i.call.apply(i,[this].concat(n))),"setSubmitAction",(function(t){e._pressYess=t})),e}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__ok").addEventListener("click",(function(t){t.preventDefault(),e._pressYess()})),U(M(a.prototype),"setEventListeners",this).call(this)}}])&&N(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(y),K=n.elements.name,Q=n.elements.about,W=t.querySelector(".profile__edit-button"),X=t.querySelector(".profile__add-button"),Z=t.querySelector(".profile__avatar"),$=new O(".popup_big-image");$.setEventListeners();var ee=new z(".popup_question");ee.setEventListeners();var te=new q({name:".profile__name",about:".profile__description"}),ne=new A("9ccf29bd-3d67-4cc8-8c99-82c18d019a44");ne.getData("users/me").then((function(e){window.myId=e._id,ue(e.avatar),te.setUserInfo(e),ne.getData("cards").then((function(e){window.addGalary=new l({items:e,renderer:function(e){var t=re(e,myId);addGalary.appends(t)}},".photos"),addGalary.renderItems()})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}));var re=function(e,t){var n=new u(e,".template-card",ce,{handleCardDelete:function(e){ee.open(),ee.setSubmitAction((function(){ne.delCard("cards/",e._id).then((function(){n.delCard(),ee.close()})).catch((function(e){console.log(e)}))}))},delLike:function(e){ne.delLike("cards/".concat(e,"/likes")).then((function(e){n.updateLikes(e.likes)})).catch((function(e){console.log(e)}))},addLike:function(e){ne.addLike("cards/".concat(e,"/likes")).then((function(e){n.updateLikes(e.likes)})).catch((function(e){console.log(e)}))}},t);return n.makeCard()},oe=new T(".popup_adder",(function(e){ne.setCard("cards",e).then((function(e){Promise.resolve(oe.changeSaveButton());var t=re(e,e.owner._id);addGalary.prepends(t),oe.close()})).catch((function(e){console.log(e)}))}));oe.setEventListeners();var ie=new T(".popup_editor",(function(e){ne.setProfile("users/me",e).then((function(e){Promise.resolve(ie.changeSaveButton()),te.setUserInfo(e),ie.close()})).catch((function(e){console.log(e)}))}));ie.setEventListeners();var ae=new T(".popup_avatar",(function(e){ne.setProfile("users/me/avatar",e).then((function(e){Promise.resolve(ae.changeSaveButton()),ue(e.avatar),ae.close()})).catch((function(e){console.log(e)}))}));ae.setEventListeners();var ce=function(e,t){$.open(e,t)},ue=function(e){i.setAttribute("src",e)},se=new h(e,n);se.enableValidation();var le=new h(e,r);le.enableValidation();var fe=new h(e,o);fe.enableValidation(),X.addEventListener("click",(function(){oe.open(),le.resetValidation()})),Z.addEventListener("click",(function(){ae.open(),fe.resetValidation()})),W.addEventListener("click",(function(){ie.open();var e=te.getUserInfo();K.value=e.name,Q.value=e.about,se.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,