!function(){"use strict";var e="9ccf29bd-3d67-4cc8-8c99-82c18d019a44",t={activeForm:".popup__inputs",formInput:".popup__input",popupSaveButton:".popup__save",popupDisableButton:"popup__save_disable",inputError:"popup__input_type_error",activeError:"popup__input_error_active"},n=document.querySelector(".gallery"),r=document.forms.profile,o=document.forms.addImage;function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,r,o,i,c){var u=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"_getTemplate",(function(){return document.querySelector(u._selector).content.cloneNode(!0)})),a(this,"_deleteImage",(function(e){u._cardTemplate=null,e.target.closest(".card").remove()})),a(this,"_addEvents",(function(){u._cardRemove.addEventListener("click",u._deleteImage),u._cardLike.addEventListener("click",(function(){u._like?(u._delLike(u._cardId),u._addLikeCounter()):(u._addLike(u._cardId),u._addLikeCounter()),u._cardLike.classList.toggle("card__like_active")})),u._cardImage.addEventListener("click",(function(){u._handleCardClick(u._newCardName,u._imageLink)}))})),a(this,"_checkLikes",(function(){u._getLikes.length>0&&null!=u._getLikes.find((function(e){return e._id==u._myId}))&&(u._cardLike.classList.add("card__like_active"),console.log("LIKEd"),u._like=!0)})),a(this,"_addLikeCounter",(function(){u._likeNumber.textContent=u._getLikes.length})),this._newCardName=t.name,this._imageLink=t.link,this._getLikes=t.likes,this._cardId=t._id,this._selector=n,this._handleCardClick=r,this._delLike=o,this._addLike=i,this._myId=c,this._like=!1}var t,n;return t=e,(n=[{key:"makeCard",value:function(){return console.log("MyID="+this._myId),this._cardTemplate=this._getTemplate(),this._cardImage=this._cardTemplate.querySelector(".card__image"),this._cardName=this._cardTemplate.querySelector(".card__name"),this._cardRemove=this._cardTemplate.querySelector(".card__remove"),this._cardLike=this._cardTemplate.querySelector(".card__like"),this._likeNumber=this._cardTemplate.querySelector(".card__like-count"),this._checkLikes(),this._addLikeCounter(),this._cardImage.setAttribute("src",this._imageLink),this._cardImage.setAttribute("alt","Фото из галереи: "+this._newCardName),this._cardName.textContent=this._newCardName,this._addEvents(),this._cardTemplate}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._items.forEach((function(t){return e._renderer(t)}))}},{key:"prepends",value:function(e){this._container.prepend(e)}},{key:"appends",value:function(e){this._container.append(e)}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d=p((function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"_setEventListeners",(function(){r._toggleButtonState(),r._inputArray.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleButtonState()}))}))})),f(this,"enableValidation",(function(){r._setEventListeners()})),f(this,"_showInputError",(function(e,t){var n=r._form.querySelector(".".concat(e.id,"-error"));e.classList.add(r._inputError),n.classList.add(r._activeError),n.textContent=t})),f(this,"_hideInputError",(function(e){var t=r._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(r._inputError),t.classList.remove(r._activeError),t.textContent=""})),f(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),f(this,"_hasInvalidInput",(function(){return r._inputArray.some((function(e){return!e.validity.valid}))})),f(this,"_toggleButtonState",(function(){r._hasInvalidInput()?(r._saveButton.classList.add(r._popupDisableButton),r._saveButton.setAttribute("disabled","disabled")):(r._saveButton.classList.remove(r._popupDisableButton),r._saveButton.removeAttribute("disabled"))})),f(this,"resetValidation",(function(){r._toggleButtonState(),r._inputArray.forEach((function(e){r._hideInputError(e)}))})),this._activeForm=t.activeForm,this._formInput=t.formInput,this._popupSaveButton=t.popupSaveButton,this._popupDisableButton=t.popupDisableButton,this._inputError=t.inputError,this._activeError=t.activeError,this._form=n,this._inputArray=Array.from(this._form.querySelectorAll(this._formInput)),this._saveButton=this._form.querySelector(this._popupSaveButton)}));function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(){document.addEventListener("keydown",o._escCloseListen=function(e){"Escape"===e.key&&o.close()})},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_active"),this._handleEscClose()}},{key:"close",value:function(){this._popup.classList.remove("popup_active"),document.removeEventListener("keydown",this._escCloseListen)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",this._closeListener=function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()})}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function m(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(i,e);var t,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(n);if(r){var o=w(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return m(this,e)});function i(e){var t,n,r,a,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),c=function(e,r){n._bigImage.setAttribute("src",r),n._bigImage.setAttribute("alt","Увеличенное фото из галереи: "+e),n._bigImageCaption.textContent=e,g((t=b(n),w(i.prototype)),"open",t).call(t)},(a="open")in(r=b(n=o.call(this,e)))?Object.defineProperty(r,a,{value:c,enumerable:!0,configurable:!0,writable:!0}):r.open=c,n._bigImage=n._popup.querySelector(".popup__image"),n._bigImageCaption=n._popup.querySelector(".popup__image-caption"),n}return t=i,Object.defineProperty(t,"prototype",{writable:!1}),t}(h);function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=I(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function I(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function C(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(r);if(o){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._form=n._popup.querySelector(".popup__inputs"),n._inputArray=n._popup.querySelectorAll(".popup__input"),n._submitForm=t,n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputArray.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",this._submitListener=function(t){t.preventDefault(),e._submitForm(e._getInputValues())}),j(P(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){j(P(a.prototype),"close",this).call(this),this._form.reset()}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(h);function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t){var n=t.userName,r=t.description;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._description=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._name.textContent,descript:this._description.textContent}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._description.textContent=e.description}}])&&B(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A,D=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url="https://mesto.nomoreparties.co/v1/cohort-43/",this._token=n,this._forUrl=t,this._headers={"Content-type":"application/json",authorization:"9ccf29bd-3d67-4cc8-8c99-82c18d019a44"}}var t,n;return t=e,(n=[{key:"getData",value:function(){return fetch(this._url+this._forUrl,{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected!")}))}},{key:"delLike",value:function(e){return fetch(this._url+e,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected!")}))}},{key:"addLike",value:function(e){return fetch(this._url+e,{headers:this._headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Bug detected!")}))}},{key:"setCard",value:function(){}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),x=r.elements.name,N=r.elements.description,V=n.querySelector(".profile__edit-button"),U=n.querySelector(".profile__add-button");new D("users/me",e).getData().then((function(e){A=e._id,console.log("usersInfo",e)})).catch((function(e){console.log(e)}));var F=function(e,t){H.open(e,t)},K=function(e){G.delLike("cards/".concat(e,"/likes")),console.log("del LIKE")},M=function(e){console.log("add LIKE"),G.addLike("cards/".concat(e,"/likes"))},z=function(e){return new c(e,".template-card",F,K,M,A).makeCard()},G=new D("cards",e);G.getData().then((function(e){var t=new s({items:e,renderer:function(e){var n=z(e);t.appends(n)}},".photos");t.renderItems()})).catch((function(e){console.log(e)}));var H=new L(".popup_big-image");H.setEventListeners();var J=new T(".popup_adder",(function(e){var t=z(e);addGalary.prepends(t),J.close()}));J.setEventListeners();var Q=new q({userName:".profile__name",description:".profile__description"}),W=new T(".popup_editor",(function(e){Q.setUserInfo(e),W.close()}));W.setEventListeners();var X=new d(t,r);X.enableValidation();var Y=new d(t,o);Y.enableValidation(),U.addEventListener("click",(function(){J.open(),Y.resetValidation()})),V.addEventListener("click",(function(){W.open();var e=Q.getUserInfo();x.value=e.userName,N.value=e.descript,X.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUk4RyxNQUtoQixJQUFNRyxFQUFXLElBQUk3QyxFQUFlLG9CQUNwQzZDLEVBQVNZLG9CQUVULElBQU1DLEVBQWdCLElBQUl2RCxFQUN4QixnQkFDQSxTQUFDK0MsR0FDQyxJQUFNSSxFQUFhTCxFQUFXQyxHQUM5QkcsVUFBVU0sU0FBU0wsR0FDbkJJLEVBQWNqRSxXQUdsQmlFLEVBQWNELG9CQUVkLElBQU1HLEVBQVcsSUFBSWhELEVBbkZHLENBQ3RCQyxTQUFVLGlCQUNWQyxZQUFhLDBCQW1GVCtDLEVBQWUsSUFBSTFELEVBQ3ZCLGlCQUNBLFNBQUNlLEdBQ0MwQyxFQUFTRSxZQUFZNUMsR0FDckIyQyxFQUFhcEUsV0FHakJvRSxFQUFhSixvQkFHYixJQUFNTSxFQUFzQixJQUFJMUcsRUFBYzlFLEVBQWdCVSxHQUM5RDhLLEVBQW9CQyxtQkFFcEIsSUFBTUMsRUFBbUIsSUFBSTVHLEVBQWM5RSxFQUFnQmEsR0FDM0Q2SyxFQUFpQkQsbUJBS2pCMUIsRUFBY2hJLGlCQUFpQixTQUFTLFdBQ3RDb0osRUFBY1osT0FDZG1CLEVBQWlCQyxxQkFHbkI3QixFQUFrQi9ILGlCQUFpQixTQUFTLFdBQzFDdUosRUFBYWYsT0FDYixJQUFNcUIsRUFBYVAsRUFBU1EsY0FDNUJsQyxFQUFVM0IsTUFBUTRELEVBQVd0RCxTQUM3QnVCLEVBQWU3QixNQUFRNEQsRUFBV2xELFNBQ2xDOEMsRUFBb0JHLHFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy92YXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRva2VuPSc5Y2NmMjliZC0zZDY3LTRjYzgtOGM5OS04MmMxOGQwMTlhNDQnO1xyXG5cclxuY29uc3QgdXNlclByb2ZpbGUgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogJy5wcm9maWxlX19uYW1lJyxcclxuICAgIGRlc2NyaXB0OiAnLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJ1xyXG4gIH1cclxuXTtcclxuXHJcbmNvbnN0IHZhbGlkYXRpb25MaXN0ID0ge1xyXG4gIGFjdGl2ZUZvcm06ICcucG9wdXBfX2lucHV0cycsXHJcbiAgZm9ybUlucHV0OiAnLnBvcHVwX19pbnB1dCcsXHJcbiAgcG9wdXBTYXZlQnV0dG9uOiAnLnBvcHVwX19zYXZlJyxcclxuICBwb3B1cERpc2FibGVCdXR0b246ICdwb3B1cF9fc2F2ZV9kaXNhYmxlJyxcclxuICBpbnB1dEVycm9yOiAncG9wdXBfX2lucHV0X3R5cGVfZXJyb3InLFxyXG4gIGFjdGl2ZUVycm9yOiAncG9wdXBfX2lucHV0X2Vycm9yX2FjdGl2ZSdcclxufTtcclxuXHJcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FsbGVyeScpO1xyXG5jb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LmZvcm1zLnByb2ZpbGU7XHJcbmNvbnN0IGNhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXMuYWRkSW1hZ2U7XHJcblxyXG5leHBvcnQge3Rva2VuLCBtYWluLCBwcm9maWxlRm9ybSwgY2FyZEZvcm0sIHZhbGlkYXRpb25MaXN0fTsiLCJleHBvcnQgY2xhc3MgQ2FyZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpdGVtLCBzZWxlY3RvclRlbXBsYXRlLCBoYW5kbGVDYXJkQ2xpY2ssIGRlbExpa2UsYWRkTGlrZSxteUlkKSB7XHJcbiAgICAgICAgdGhpcy5fbmV3Q2FyZE5hbWUgPSBpdGVtLm5hbWU7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VMaW5rID0gaXRlbS5saW5rO1xyXG4gICAgICAgIHRoaXMuX2dldExpa2VzID0gaXRlbS5saWtlcztcclxuICAgICAgICB0aGlzLl9jYXJkSWQgPSBpdGVtLl9pZDtcclxuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yVGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gICAgICAgIHRoaXMuX2RlbExpa2UgPSBkZWxMaWtlO1xyXG4gICAgICAgIHRoaXMuX2FkZExpa2U9YWRkTGlrZTtcclxuICAgICAgICB0aGlzLl9teUlkPW15SWQ7XHJcbiAgICAgICAgdGhpcy5fbGlrZT1mYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VGVtcGxhdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3IpXHJcbiAgICAgICAgICAgIC5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICByZXR1cm4gY2FyZFRlbXBsYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIF9kZWxldGVJbWFnZSA9IChldnQpID0+IHtcclxuICAgICAgICB0aGlzLl9jYXJkVGVtcGxhdGUgPSBudWxsO1xyXG4gICAgICAgIGV2dC50YXJnZXQuY2xvc2VzdCgnLmNhcmQnKS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBfYWRkRXZlbnRzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NhcmRSZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9kZWxldGVJbWFnZSk7XHJcbiAgICAgICAgdGhpcy5fY2FyZExpa2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saWtlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlbExpa2UodGhpcy5fY2FyZElkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZExpa2VDb3VudGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZExpa2UodGhpcy5fY2FyZElkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZExpa2VDb3VudGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fY2FyZExpa2UuY2xhc3NMaXN0LnRvZ2dsZSgnY2FyZF9fbGlrZV9hY3RpdmUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh0aGlzLl9uZXdDYXJkTmFtZSwgdGhpcy5faW1hZ2VMaW5rKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9jaGVja0xpa2VzID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9nZXRMaWtlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlrZSA9IHRoaXMuX2dldExpa2VzLmZpbmQoaXRlbSA9PiBpdGVtLl9pZCA9PSB0aGlzLl9teUlkKTtcclxuICAgICAgICAgICAgaWYgKGlzTGlrZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhcmRMaWtlLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxJS0VkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlrZT10cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2FkZExpa2VDb3VudGVyID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2xpa2VOdW1iZXIudGV4dENvbnRlbnQgPSB0aGlzLl9nZXRMaWtlcy5sZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgbWFrZUNhcmQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ015SUQ9Jyt0aGlzLl9teUlkKTtcclxuICAgICAgICB0aGlzLl9jYXJkVGVtcGxhdGUgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9jYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltYWdlJyk7XHJcbiAgICAgICAgdGhpcy5fY2FyZE5hbWUgPSB0aGlzLl9jYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcignLmNhcmRfX25hbWUnKTtcclxuICAgICAgICB0aGlzLl9jYXJkUmVtb3ZlID0gdGhpcy5fY2FyZFRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19yZW1vdmUnKTtcclxuICAgICAgICB0aGlzLl9jYXJkTGlrZSA9IHRoaXMuX2NhcmRUZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZScpO1xyXG4gICAgICAgIHRoaXMuX2xpa2VOdW1iZXIgPSB0aGlzLl9jYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtY291bnQnKTtcclxuICAgICAgICB0aGlzLl9jaGVja0xpa2VzKCk7XHJcbiAgICAgICAgdGhpcy5fYWRkTGlrZUNvdW50ZXIoKTtcclxuICAgICAgICB0aGlzLl9jYXJkSW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLl9pbWFnZUxpbmspO1xyXG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZS5zZXRBdHRyaWJ1dGUoJ2FsdCcsICfQpNC+0YLQviDQuNC3INCz0LDQu9C10YDQtdC4OiAnICsgdGhpcy5fbmV3Q2FyZE5hbWUpO1xyXG4gICAgICAgIHRoaXMuX2NhcmROYW1lLnRleHRDb250ZW50ID0gdGhpcy5fbmV3Q2FyZE5hbWU7XHJcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmRUZW1wbGF0ZTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBzZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gIH1cclxuXHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5jbGVhcigpO1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5fcmVuZGVyZXIoaXRlbSkpXHJcbiAgfVxyXG5cclxuXHJcbiAgcHJlcGVuZHMoaXRlbUh0bWwpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW1IdG1sKVxyXG4gIH1cclxuICBhcHBlbmRzKGl0ZW1IdG1sKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGl0ZW1IdG1sKVxyXG4gIH1cclxufVxyXG5cclxuIiwiZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IobGlzdCwgZm9ybUFjdGl2ZSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUZvcm0gPSBsaXN0LmFjdGl2ZUZvcm07XHJcbiAgICAgICAgdGhpcy5fZm9ybUlucHV0ID0gbGlzdC5mb3JtSW5wdXQ7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBTYXZlQnV0dG9uID0gbGlzdC5wb3B1cFNhdmVCdXR0b247XHJcbiAgICAgICAgdGhpcy5fcG9wdXBEaXNhYmxlQnV0dG9uID0gbGlzdC5wb3B1cERpc2FibGVCdXR0b247XHJcbiAgICAgICAgdGhpcy5faW5wdXRFcnJvciA9IGxpc3QuaW5wdXRFcnJvcjtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFcnJvciA9IGxpc3QuYWN0aXZlRXJyb3I7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGZvcm1BY3RpdmU7XHJcbiAgICAgICAgdGhpcy5faW5wdXRBcnJheSA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2Zvcm1JbnB1dCkpO1xyXG4gICAgICAgIHRoaXMuX3NhdmVCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fcG9wdXBTYXZlQnV0dG9uKTtcclxuICAgIH1cclxuXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgICB0aGlzLl9pbnB1dEFycmF5LmZvckVhY2goKGlucHV0cykgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dHMuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZVZhbGlkYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH07XHJcblxyXG4gICAgX3Nob3dJbnB1dEVycm9yID0gKHZhbGlkRWxlbWVudCwgZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JJbkVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke3ZhbGlkRWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICB2YWxpZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yKTtcclxuICAgICAgICBlcnJvckluRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2FjdGl2ZUVycm9yKTtcclxuICAgICAgICBlcnJvckluRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICBfaGlkZUlucHV0RXJyb3IgPSAodmFsaWRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JJbkVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke3ZhbGlkRWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICB2YWxpZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yKTtcclxuICAgICAgICBlcnJvckluRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2FjdGl2ZUVycm9yKTtcclxuICAgICAgICBlcnJvckluRWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0lucHV0VmFsaWRpdHkgPSAodmFsaWRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCF2YWxpZEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IodmFsaWRFbGVtZW50LCB2YWxpZEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRoaXMuX2hpZGVJbnB1dEVycm9yKHZhbGlkRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2hhc0ludmFsaWRJbnB1dCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRBcnJheS5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RvZ2dsZUJ1dHRvblN0YXRlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zYXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fcG9wdXBEaXNhYmxlQnV0dG9uKTtcclxuICAgICAgICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zYXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fcG9wdXBEaXNhYmxlQnV0dG9uKTtcclxuICAgICAgICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0VmFsaWRhdGlvbiA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX2lucHV0QXJyYXkuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgIH1cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfYWN0aXZlJyk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9hY3RpdmUnKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fZXNjQ2xvc2VMaXN0ZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVFc2NDbG9zZSA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fZXNjQ2xvc2VMaXN0ZW4gPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbG9zZUxpc3RlbmVyID0gKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQgfHwgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX19jbG9zZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9iaWdJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcclxuICAgICAgICB0aGlzLl9iaWdJbWFnZUNhcHRpb249dGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZS1jYXB0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbiA9IChuYW1lLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fYmlnSW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCBsaW5rKTtcclxuICAgICAgICB0aGlzLl9iaWdJbWFnZS5zZXRBdHRyaWJ1dGUoJ2FsdCcsICfQo9Cy0LXQu9C40YfQtdC90L3QvtC1INGE0L7RgtC+INC40Lcg0LPQsNC70LXRgNC10Lg6ICcgKyBuYW1lKTtcclxuICAgICAgICB0aGlzLl9iaWdJbWFnZUNhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgc3VibWl0Rm9ybSkge1xyXG4gICAgICAgIHN1cGVyKHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dHMnKTtcclxuICAgICAgICB0aGlzLl9pbnB1dEFycmF5ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19pbnB1dCcpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEZvcm0gPSBzdWJtaXRGb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9pbnB1dEFycmF5LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9zdWJtaXRMaXN0ZW5lciA9IChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEZvcm0odGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJOYW1lLCBkZXNjcmlwdGlvbiB9KSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlck5hbWUpO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkZXNjcmlwdGlvbik7XHJcbiAgICB9XHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICBjb25zdCBnZXRJbmZvID0ge1xyXG4gICAgICAgICAgICB1c2VyTmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCxcclxuICAgICAgICAgICAgZGVzY3JpcHQ6IHRoaXMuX2Rlc2NyaXB0aW9uLnRleHRDb250ZW50XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZ2V0SW5mbztcclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VySW5mbyhuZXdJbnB1dHMpIHtcclxuICAgICAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmV3SW5wdXRzLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBuZXdJbnB1dHMuZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgQXBpIHtcclxuICAgIGNvbnN0cnVjdG9yKGZvclVybCx0b2tlbikge1xyXG4gICAgICAgIHRoaXMuX3VybCA9ICdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQzLyc7XHJcbiAgICAgICAgdGhpcy5fdG9rZW4gPSB0b2tlbjtcclxuICAgICAgICB0aGlzLl9mb3JVcmw9Zm9yVXJsO1xyXG4gICAgICAgIHRoaXMuX2hlYWRlcnMgPSB7XHJcbiAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICdhdXRob3JpemF0aW9uJzogJzljY2YyOWJkLTNkNjctNGNjOC04Yzk5LTgyYzE4ZDAxOWE0NCdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5fdXJsK3RoaXMuX2ZvclVybCwgeyBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQnVnIGRldGVjdGVkIScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxMaWtlKGZvclVybCl7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMuX3VybCtmb3JVcmwsIHtcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0J1ZyBkZXRlY3RlZCEnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gXHJcblxyXG4gICAgYWRkTGlrZShmb3JVcmwpe1xyXG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl91cmwrZm9yVXJsLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdCdWcgZGV0ZWN0ZWQhJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IFxyXG5cclxuICAgIHNldENhcmQoKXtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyB0b2tlbiwgbWFpbiwgcHJvZmlsZUZvcm0sIGNhcmRGb3JtLCB2YWxpZGF0aW9uTGlzdCB9IGZyb20gXCIuL2NvbXBvbmVudHMvdmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmRcIjtcclxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhGb3JtIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCB7IFVzZXJJbmZvIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgeyBBcGkgfSBmcm9tIFwiLi9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5pbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5jc3NcIjtcclxuXHJcblxyXG5jb25zdCBwcm9maWxlRGVzY3JpYmUgPSB7XHJcbiAgdXNlck5hbWU6ICcucHJvZmlsZV9fbmFtZScsXHJcbiAgZGVzY3JpcHRpb246ICcucHJvZmlsZV9fZGVzY3JpcHRpb24nXHJcbn07XHJcbmNvbnN0IGlucHV0TmFtZSA9IHByb2ZpbGVGb3JtLmVsZW1lbnRzLm5hbWU7XHJcbmNvbnN0IGlucHV0bkRlc2NyaXB0ID0gcHJvZmlsZUZvcm0uZWxlbWVudHMuZGVzY3JpcHRpb247XHJcblxyXG5cclxuLy8tLS0tLWJ1dHRvbnMtLS0tLS0tXHJcbmNvbnN0IHByb2ZpbGVPcGVuQnV0dG9uID0gbWFpbi5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fZWRpdC1idXR0b24nKTtcclxuY29uc3QgY2FyZEFkZEJ1dHRvbiA9IG1haW4ucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZC1idXR0b24nKTtcclxuXHJcbmxldCBteUlkO1xyXG5jb25zdCBhcGlVc2VyID0gbmV3IEFwaSgndXNlcnMvbWUnLCB0b2tlbik7XHJcbmFwaVVzZXIuZ2V0RGF0YSgpXHJcbiAgLnRoZW4oKHVzZXJzSW5mbykgPT4ge1xyXG4gICAgbXlJZCA9IHVzZXJzSW5mby5faWQ7XHJcbiAgICAvL3JldHVybiBteUlkOyAgXHJcbiAgICBjb25zb2xlLmxvZygndXNlcnNJbmZvJywgdXNlcnNJbmZvKTtcclxuXHJcblxyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgfSk7XHJcblxyXG4vLz09PT09PT1mdW5jdGlvbnM9PT09PT09PT1cclxuY29uc3QgaGFuZGxlQ2FyZENsaWNrID0gKGNhcmROYW1lLCBjYXJkTGluaykgPT4ge1xyXG4gIGJpZ0ltYWdlLm9wZW4oY2FyZE5hbWUsIGNhcmRMaW5rKTtcclxufVxyXG5cclxuY29uc3QgZGVsTGlrZSA9IChjYXJkSWQpID0+IHtcclxuICBhcGlDYXJkcy5kZWxMaWtlKGBjYXJkcy8ke2NhcmRJZH0vbGlrZXNgKTtcclxuICBjb25zb2xlLmxvZyhcImRlbCBMSUtFXCIpO1xyXG59XHJcblxyXG5jb25zdCBhZGRMaWtlID0gKGNhcmRJZCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwiYWRkIExJS0VcIik7XHJcbiAgYXBpQ2FyZHMuYWRkTGlrZShgY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCk7XHJcbn1cclxuXHJcbmNvbnN0IGFkZE5ld0NhcmQgPSAoZGVzY3JpYmUpID0+IHtcclxuICBjb25zdCBuZXdDYXJkID0gbmV3IENhcmQoZGVzY3JpYmUsICcudGVtcGxhdGUtY2FyZCcsIGhhbmRsZUNhcmRDbGljaywgZGVsTGlrZSwgYWRkTGlrZSwgbXlJZCk7XHJcbiAgY29uc3QgbmV3UmV0dXJuQ2FyZCA9IG5ld0NhcmQubWFrZUNhcmQoKTtcclxuICByZXR1cm4gbmV3UmV0dXJuQ2FyZDtcclxufVxyXG5cclxuXHJcbi8vPT09PT09PWNsYXNzZXMgYW5kIGNhbGxiYWNrcz09PT09PT09PVxyXG5cclxuLy8vLy8vLy8vLS1nZXR0aW5nIGNhcmRzIGZyb20gc2VydmVyLS0vLy8vLy8vL1xyXG5jb25zdCBhcGlDYXJkcyA9IG5ldyBBcGkoJ2NhcmRzJywgdG9rZW4pO1xyXG5cclxuYXBpQ2FyZHMuZ2V0RGF0YSgpXHJcbiAgLnRoZW4oKGRiQ2FyZHMpID0+IHtcclxuICAgIGNvbnN0IGFkZEdhbGFyeSA9IG5ldyBTZWN0aW9uKHtcclxuICAgICAgaXRlbXM6IGRiQ2FyZHMsXHJcbiAgICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJldHVybkNhcmQgPSBhZGROZXdDYXJkKGl0ZW0pO1xyXG4gICAgICAgIGFkZEdhbGFyeS5hcHBlbmRzKHJldHVybkNhcmQpO1xyXG4gICAgICB9XHJcbiAgICB9LCBcIi5waG90b3NcIik7XHJcbiAgICBhZGRHYWxhcnkucmVuZGVySXRlbXMoKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gIH0pO1xyXG5cclxuXHJcblxyXG5jb25zdCBiaWdJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZSgnLnBvcHVwX2JpZy1pbWFnZScpO1xyXG5iaWdJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcG9wdXBDYXJkRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gICcucG9wdXBfYWRkZXInLFxyXG4gIChkZXNjcmliZSkgPT4ge1xyXG4gICAgY29uc3QgcmV0dXJuQ2FyZCA9IGFkZE5ld0NhcmQoZGVzY3JpYmUpO1xyXG4gICAgYWRkR2FsYXJ5LnByZXBlbmRzKHJldHVybkNhcmQpO1xyXG4gICAgcG9wdXBDYXJkRm9ybS5jbG9zZSgpO1xyXG4gIH1cclxuKTtcclxucG9wdXBDYXJkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8ocHJvZmlsZURlc2NyaWJlKTtcclxuXHJcbmNvbnN0IHBvcHVwUHJvZmlsZSA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gICcucG9wdXBfZWRpdG9yJyxcclxuICAobmV3SW5wdXRzKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhuZXdJbnB1dHMpO1xyXG4gICAgcG9wdXBQcm9maWxlLmNsb3NlKCk7XHJcbiAgfVxyXG4pO1xyXG5wb3B1cFByb2ZpbGUuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vLS0tLS0tLS1lbmFibGUgdmFsaWRhdGlvbi0tLS0tLS0tLS1cclxuY29uc3QgcHJvZmlsZUZvcm1WYWxpZGF0ZSA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25MaXN0LCBwcm9maWxlRm9ybSk7XHJcbnByb2ZpbGVGb3JtVmFsaWRhdGUuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QgY2FyZEZvcm1WYWxpZGF0ZSA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25MaXN0LCBjYXJkRm9ybSk7XHJcbmNhcmRGb3JtVmFsaWRhdGUuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuXHJcbi8vPT09PT09PT09PWJ1dHRvbnMgbGlzdGVuZXJzPT09PT09PT09PT1cclxuXHJcbmNhcmRBZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgcG9wdXBDYXJkRm9ybS5vcGVuKCk7XHJcbiAgY2FyZEZvcm1WYWxpZGF0ZS5yZXNldFZhbGlkYXRpb24oKTtcclxufSlcclxuXHJcbnByb2ZpbGVPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gIHBvcHVwUHJvZmlsZS5vcGVuKCk7XHJcbiAgY29uc3Qgb2xkUHJvZmlsZSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgaW5wdXROYW1lLnZhbHVlID0gb2xkUHJvZmlsZS51c2VyTmFtZTtcclxuICBpbnB1dG5EZXNjcmlwdC52YWx1ZSA9IG9sZFByb2ZpbGUuZGVzY3JpcHQ7XHJcbiAgcHJvZmlsZUZvcm1WYWxpZGF0ZS5yZXNldFZhbGlkYXRpb24oKTtcclxufSlcclxuXHJcbiJdLCJuYW1lcyI6WyJ0b2tlbiIsInZhbGlkYXRpb25MaXN0IiwiYWN0aXZlRm9ybSIsImZvcm1JbnB1dCIsInBvcHVwU2F2ZUJ1dHRvbiIsInBvcHVwRGlzYWJsZUJ1dHRvbiIsImlucHV0RXJyb3IiLCJhY3RpdmVFcnJvciIsIm1haW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9maWxlRm9ybSIsImZvcm1zIiwicHJvZmlsZSIsImNhcmRGb3JtIiwiYWRkSW1hZ2UiLCJDYXJkIiwiaXRlbSIsInNlbGVjdG9yVGVtcGxhdGUiLCJoYW5kbGVDYXJkQ2xpY2siLCJkZWxMaWtlIiwiYWRkTGlrZSIsIm15SWQiLCJfc2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZXZ0IiwiX2NhcmRUZW1wbGF0ZSIsInRhcmdldCIsImNsb3Nlc3QiLCJyZW1vdmUiLCJfY2FyZFJlbW92ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVsZXRlSW1hZ2UiLCJfY2FyZExpa2UiLCJfbGlrZSIsIl9kZWxMaWtlIiwiX2NhcmRJZCIsIl9hZGRMaWtlQ291bnRlciIsIl9hZGRMaWtlIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiX2NhcmRJbWFnZSIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfbmV3Q2FyZE5hbWUiLCJfaW1hZ2VMaW5rIiwiX2dldExpa2VzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmluZCIsIl9pZCIsIl9teUlkIiwiYWRkIiwiY29uc29sZSIsImxvZyIsIl9saWtlTnVtYmVyIiwidGV4dENvbnRlbnQiLCJ0aGlzIiwibmFtZSIsImxpbmsiLCJsaWtlcyIsIl9nZXRUZW1wbGF0ZSIsIl9jYXJkTmFtZSIsIl9jaGVja0xpa2VzIiwic2V0QXR0cmlidXRlIiwiX2FkZEV2ZW50cyIsIlNlY3Rpb24iLCJzZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaW5uZXJIVE1MIiwiY2xlYXIiLCJmb3JFYWNoIiwiaXRlbUh0bWwiLCJwcmVwZW5kIiwiYXBwZW5kIiwiRm9ybVZhbGlkYXRvciIsImxpc3QiLCJmb3JtQWN0aXZlIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX2lucHV0QXJyYXkiLCJpbnB1dHMiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwidmFsaWRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JJbkVsZW1lbnQiLCJfZm9ybSIsImlkIiwiX2lucHV0RXJyb3IiLCJfYWN0aXZlRXJyb3IiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJzb21lIiwiaW5wdXRFbGVtZW50IiwiX2hhc0ludmFsaWRJbnB1dCIsIl9zYXZlQnV0dG9uIiwiX3BvcHVwRGlzYWJsZUJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsImlucHV0IiwiX2FjdGl2ZUZvcm0iLCJfZm9ybUlucHV0IiwiX3BvcHVwU2F2ZUJ1dHRvbiIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJQb3B1cCIsIl9lc2NDbG9zZUxpc3RlbiIsImtleSIsImNsb3NlIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9jbG9zZUxpc3RlbmVyIiwiY3VycmVudFRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoSW1hZ2UiLCJfYmlnSW1hZ2UiLCJfYmlnSW1hZ2VDYXB0aW9uIiwiUG9wdXBXaXRoRm9ybSIsInN1Ym1pdEZvcm0iLCJfc3VibWl0Rm9ybSIsIm5ld1ZhbHVlcyIsInZhbHVlIiwiX3N1Ym1pdExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsIlVzZXJJbmZvIiwidXNlck5hbWUiLCJkZXNjcmlwdGlvbiIsIl9uYW1lIiwiX2Rlc2NyaXB0aW9uIiwiZGVzY3JpcHQiLCJuZXdJbnB1dHMiLCJBcGkiLCJmb3JVcmwiLCJfdXJsIiwiX3Rva2VuIiwiX2ZvclVybCIsIl9oZWFkZXJzIiwiZmV0Y2giLCJoZWFkZXJzIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJtZXRob2QiLCJpbnB1dE5hbWUiLCJlbGVtZW50cyIsImlucHV0bkRlc2NyaXB0IiwicHJvZmlsZU9wZW5CdXR0b24iLCJjYXJkQWRkQnV0dG9uIiwiZ2V0RGF0YSIsInVzZXJzSW5mbyIsImNhdGNoIiwiZXJyIiwiY2FyZE5hbWUiLCJjYXJkTGluayIsImJpZ0ltYWdlIiwib3BlbiIsImNhcmRJZCIsImFwaUNhcmRzIiwiYWRkTmV3Q2FyZCIsImRlc2NyaWJlIiwibWFrZUNhcmQiLCJkYkNhcmRzIiwiYWRkR2FsYXJ5IiwicmV0dXJuQ2FyZCIsImFwcGVuZHMiLCJyZW5kZXJJdGVtcyIsInNldEV2ZW50TGlzdGVuZXJzIiwicG9wdXBDYXJkRm9ybSIsInByZXBlbmRzIiwidXNlckluZm8iLCJwb3B1cFByb2ZpbGUiLCJzZXRVc2VySW5mbyIsInByb2ZpbGVGb3JtVmFsaWRhdGUiLCJlbmFibGVWYWxpZGF0aW9uIiwiY2FyZEZvcm1WYWxpZGF0ZSIsInJlc2V0VmFsaWRhdGlvbiIsIm9sZFByb2ZpbGUiLCJnZXRVc2VySW5mbyJdLCJzb3VyY2VSb290IjoiIn0=